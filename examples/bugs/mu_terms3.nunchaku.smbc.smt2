; generated by nunchaku
(declare-datatypes () ((a (Zero) 
                          (One))))
(declare-sort tree 0)
(declare-fun Node (a tree tree) tree)
(declare-fun is_Node (tree) Bool)
(declare-fun select_Node_0 (tree) a)
(declare-fun select_Node_1 (tree) tree)
(declare-fun select_Node_2 (tree) tree)
(declare-datatypes () ((_nat (_zero) 
                             (_succ (select-_succ-0 _nat)))))
(declare-fun decr_eq_corec_tree () _nat)
(define-fun-rec
   eq_corec_tree ((v_0 _nat) (v_1 tree) (v_2 tree)) Bool
     (or
      (match v_0 (case _zero true) 
                 (case default false)) 
      (match v_0
        (case (_succ x_0)
           (and
            (is_Node v_1) 
            (is_Node v_2) 
            (= (select_Node_0 v_1) (select_Node_0 v_2)) 
            (eq_corec_tree x_0 (select_Node_1 v_1) (select_Node_1 v_2)) 
            (eq_corec_tree x_0 (select_Node_2 v_1) (select_Node_2 v_2)))) 
        (case default false))))
(assert
 (forall
    ((x tree))
    (forall ((y tree)) (=> (eq_corec_tree decr_eq_corec_tree x y) (= x y)))))
(assert (forall ((v_tree tree)) (is_Node v_tree)))
(assert true)
(assert
 (forall
    ((x_1 tree))
    (forall
       ((y_0 tree))
       (=>
        (and
         (is_Node x_1) 
         (is_Node y_0) 
         (= (select_Node_0 x_1) (select_Node_0 y_0)) 
         (= (select_Node_1 x_1) (select_Node_1 y_0)) 
         (= (select_Node_2 x_1) (select_Node_2 y_0)))
        (= x_1 y_0)))))
(declare-fun all0 () tree)
(define-fun-rec
   cnst ((x_2 a)) tree
     (let ((#tree_0 (Node x_2 (cnst x_2) (cnst x_2))))
        (asserting #tree_0 
          (and
           (= (cnst x_2) (select_Node_1 #tree_0)) 
           (= x_2 (select_Node_0 #tree_0)) 
           (is_Node #tree_0) 
           (= (cnst x_2) (select_Node_2 #tree_0))))))
(assert (= all0 (cnst Zero)))
(declare-fun all1 () tree)
(assert (= all1 (cnst One)))
(declare-fun swap (a) a)
(assert (= (swap Zero) One))
(assert (= (swap One) Zero))
(declare-fun alt01 () tree)
(define-fun-rec
   alt ((x_3 a)) tree
     (let ((#tree_0_0 (Node x_3 (alt (swap x_3)) (alt (swap x_3)))))
        (asserting #tree_0_0 
          (and
           (= (alt (swap x_3)) (select_Node_1 #tree_0_0)) 
           (= x_3 (select_Node_0 #tree_0_0)) 
           (is_Node #tree_0_0) 
           (= (alt (swap x_3)) (select_Node_2 #tree_0_0))))))
(assert (= alt01 (alt Zero)))
(declare-fun alt10 () tree)
(assert (= alt10 (alt One)))
(declare-fun odd2 () tree)
(declare-fun odd3 () tree)
(declare-fun odd1 () tree)
(assert
 (let ((#tree_0_1 (Node Zero odd2 odd3)))
    (asserting (= odd1 #tree_0_1) 
      (and
       (= odd3 (select_Node_2 #tree_0_1)) 
       (= Zero (select_Node_0 #tree_0_1)) 
       (is_Node #tree_0_1) 
       (= odd2 (select_Node_1 #tree_0_1))))))
(assert
 (let ((#tree_0_2 (Node One odd1 odd1)))
    (let ((#tree_1 (Node One odd2 odd3)))
       (let ((#tree_2 (Node One #tree_0_2 #tree_1)))
          (asserting (= odd2 #tree_2) 
            (and
             (= odd3 (select_Node_2 #tree_1)) 
             (= odd1 (select_Node_2 #tree_0_2)) 
             (= One (select_Node_0 #tree_2)) 
             (= One (select_Node_0 #tree_1)) 
             (= One (select_Node_0 #tree_0_2)) 
             (is_Node #tree_2) 
             (is_Node #tree_1) 
             (is_Node #tree_0_2) 
             (= odd2 (select_Node_1 #tree_1)) 
             (= #tree_1 (select_Node_2 #tree_2)) 
             (= #tree_0_2 (select_Node_1 #tree_2)) 
             (= odd1 (select_Node_1 #tree_0_2))))))))
(assert
 (let ((#tree_0_3 (Node Zero odd1 odd3)))
    (let ((#tree_1_0 (Node Zero odd2 #tree_0_3)))
       (asserting (= odd3 #tree_1_0) 
         (and
          (= odd3 (select_Node_2 #tree_0_3)) 
          (= Zero (select_Node_0 #tree_1_0)) 
          (= Zero (select_Node_0 #tree_0_3)) 
          (is_Node #tree_1_0) 
          (is_Node #tree_0_3) 
          (= odd2 (select_Node_1 #tree_1_0)) 
          (= #tree_0_3 (select_Node_2 #tree_1_0)) 
          (= odd1 (select_Node_1 #tree_0_3)))))))
(assert-not false)
(check-sat)

